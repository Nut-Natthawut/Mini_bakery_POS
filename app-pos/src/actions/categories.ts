"use server";

import { PrismaClient } from "@prisma/client";
import { revalidatePath } from "next/cache";
const prisma = new PrismaClient();

export type CategoryFormData = {
  success: boolean;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  data?: any;
  error?: string;
};

//get
export async function getCategories(): Promise<CategoryFormData> {
  try {
    const categories = await prisma.category.findMany({
      orderBy: {
        createdAt: "asc",
      },
    });
    return {
      success: true,
      data: categories,
    };
  } catch (error) {
    console.error("Error fetching categories:", error);
    return {
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏î‡πâ",
    };
  }
}

export async function addCategory(
  categoryName: string
): Promise<CategoryFormData> {
  try {
    if (!categoryName || categoryName.trim() === "") {
      return {
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
      };
    }

    const existingCategory = await prisma.category.findFirst({
      where: {
        categoryName: categoryName.trim(),
      },
    });

    if (existingCategory) {
      return {
        success: false,
        error: "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
      };
    }

    const newCategory = await prisma.category.create({
      data: {
        categoryName: categoryName.trim(),
      },
    });

    revalidatePath("/categorises");

    return {
      success: true,
      data: newCategory,
    };
  } catch (error) {
    console.error("Error adding category:", error);
    return {
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
    };
  }
}

export async function updateCategory(
  categoryID: string,
  categoryName: string
): Promise<CategoryFormData> {
  try {
    if (!categoryName || categoryName.trim() === "") {
      return {
        success: false,
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
      };
    }

    if (!categoryID) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
      };
    }
    const existingCategory = await prisma.category.findUnique({
      where: {
        categoryID: categoryID,
      },
    });
    if (!existingCategory) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
      };
    }
    const duplicateCategory = await prisma.category.findFirst({
      where: {
        categoryName: categoryName.trim(),
        NOT: {
          categoryID: categoryID,
        },
      },
    });

    if (duplicateCategory) {
      return {
        success: false,
        error: "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß",
      };
    }
    const updatedCategory = await prisma.category.update({
      where: {
        categoryID: categoryID,
      },
      data: {
        categoryName: categoryName.trim(),
      },
    });

    revalidatePath("/categorises");

    return {
      success: true,
      data: updatedCategory,
    };
  } catch (error) {
    console.error("Error updating category:", error);
    return {
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
    };
  }
}

export async function deleteCategory(
  categoryID: string
): Promise<CategoryFormData> {
  try {
    if (!categoryID) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      };
    }
    const existingCategory = await prisma.category.findUnique({
      where: {
        categoryID: categoryID,
      },
    });
    if (!existingCategory) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö",
      };
    }

    const menuCategoryCount = await prisma.menu_Category.count({
      where: {
        categoryID: categoryID,
      },
    });

    if (menuCategoryCount > 0) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà",
      };
    }

    await prisma.category.delete({
      where: {
        categoryID: categoryID,
      },
    });

    revalidatePath("/categorises");

    return {
      success: true,
      data: { message: "‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" },
    };
  } catch (error) {
    console.error("Error deleting category:", error);
    return {
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
    };
  }
}

export async function getCategoryById(
  categoryID: string
): Promise<CategoryFormData> {
  try {
    if (!categoryID) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
      };
    }
    const category = await prisma.category.findUnique({
      where: {
        categoryID: categoryID,
      },
    });
    if (!category) {
      return {
        success: false,
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
      };
    }
    return {
      success: true,
      data: category,
    };
  } catch (error) {
    console.error("Error getting category by ID:", error);
    return {
      success: false,
      error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ",
    };
  }
}

/* ---------------------------------------------------------------------------
   üîΩ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‚Äî ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ/‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å üîΩ
--------------------------------------------------------------------------- */

// ‚úÖ ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô add ‡πÅ‡∏ö‡∏ö case-insensitive + trim ‡πÅ‡∏ô‡πà‡∏ô‡∏´‡∏ô‡∏≤
export async function addCategorySafe(name: string): Promise<CategoryFormData> {
  try {
    const categoryName = (name || "").trim();
    if (!categoryName) return { success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" };

    const dup = await prisma.category.findFirst({
      where: { categoryName: { equals: categoryName, mode: "insensitive" } },
      select: { categoryID: true },
    });
    if (dup) return { success: false, error: "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" };

    const created = await prisma.category.create({
      data: { categoryName },
    });

    revalidatePath("/categorises");
    return { success: true, data: created };
  } catch (e) {
    console.error("addCategorySafe error:", e);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" };
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡πà‡∏≤‡∏ô FormData (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å client ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á fd ‡∏°‡∏≤)
export async function addCategoryFromForm(fd: FormData): Promise<CategoryFormData> {
  const name = String(fd.get("categoryName") || "");
  return addCategorySafe(name);
}

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ (case-insensitive guard)
export async function updateCategorySafe(
  categoryID: string,
  name: string
): Promise<CategoryFormData> {
  try {
    const categoryName = (name || "").trim();
    if (!categoryID) return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" };
    if (!categoryName) return { success: false, error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" };

    const exists = await prisma.category.findUnique({ where: { categoryID } });
    if (!exists) return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" };

    const dup = await prisma.category.findFirst({
      where: {
        categoryName: { equals: categoryName, mode: "insensitive" },
        NOT: { categoryID },
      },
      select: { categoryID: true },
    });
    if (dup) return { success: false, error: "‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" };

    const updated = await prisma.category.update({
      where: { categoryID },
      data: { categoryName },
    });

    revalidatePath("/categorises");
    return { success: true, data: updated };
  } catch (e) {
    console.error("updateCategorySafe error:", e);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" };
  }
}

// ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/auto-complete)
export async function searchCategories(keyword: string): Promise<CategoryFormData> {
  try {
    const q = (keyword || "").trim();
    const rows = await prisma.category.findMany({
      where: q
        ? { categoryName: { contains: q, mode: "insensitive" } }
        : undefined,
      orderBy: { categoryName: "asc" },
      select: { categoryID: true, categoryName: true },
    });
    return { success: true, data: rows };
  } catch (e) {
    console.error("searchCategories error:", e);
    return { success: false, error: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥)
export async function bulkAddCategories(
  names: string[]
): Promise<CategoryFormData> {
  try {
    const trimmed = (names || []).map((n) => (n || "").trim()).filter(Boolean);
    if (trimmed.length === 0) return { success: false, error: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°" };

    const existing = await prisma.category.findMany({
      where: { categoryName: { in: trimmed } },
      select: { categoryName: true },
    });
    const existSet = new Set(existing.map((x) => x.categoryName.toLowerCase()));

    const toCreate = trimmed.filter((n) => !existSet.has(n.toLowerCase()));
    if (toCreate.length === 0) {
      return { success: true, data: { created: [], skipped: trimmed } };
    }

    const created = await prisma.$transaction(
      toCreate.map((name) =>
        prisma.category.create({
          data: { categoryName: name },
          select: { categoryID: true, categoryName: true },
        })
      )
    );

    revalidatePath("/categorises");
    return { success: true, data: { created, skipped: Array.from(existSet) } };

  } catch (e) {
    console.error("bulkAddCategories error:", e);
    return { success: false, error: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
  }
}

/* ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏π-‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (menu_Category) =====
   ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î (categories: string[])
*/

// ‡πÅ‡∏ô‡∏ö‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏ô‡∏π (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
export async function attachMenuCategories(
  menuID: string,
  categoryIDs: string[]
): Promise<CategoryFormData> {
  try {
    if (!menuID) return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π" };
    const ids = Array.from(new Set((categoryIDs || []).filter(Boolean)));
    if (ids.length === 0) return { success: true, data: [] };

    // ‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á
    const existing = await prisma.menu_Category.findMany({
      where: { menuID, categoryID: { in: ids } },
      select: { categoryID: true },
    });
    const existSet = new Set(existing.map((x) => x.categoryID));
    const toCreate = ids.filter((id) => !existSet.has(id));

    const created = await prisma.$transaction(
      toCreate.map((categoryID) =>
        prisma.menu_Category.create({ data: { menuID, categoryID } })
      )
    );

    return { success: true, data: created };
  } catch (e) {
    console.error("attachMenuCategories error:", e);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ" };
  }
}

// ‡∏ñ‡∏≠‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
export async function detachAllMenuCategories(menuID: string): Promise<CategoryFormData> {
  try {
    if (!menuID) return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π" };
    await prisma.menu_Category.deleteMany({ where: { menuID } });
    return { success: true, data: { message: "‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" } };
  } catch (e) {
    console.error("detachAllMenuCategories error:", e);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ" };
  }
}

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (sync)
export async function replaceMenuCategories(
  menuID: string,
  categoryIDs: string[]
): Promise<CategoryFormData> {
  try {
    if (!menuID) return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π" };
    const ids = Array.from(new Set((categoryIDs || []).filter(Boolean)));

    await prisma.$transaction([
      prisma.menu_Category.deleteMany({ where: { menuID } }),
      ...(ids.map((categoryID) =>
        prisma.menu_Category.create({ data: { menuID, categoryID } })
      )),
    ]);

    return { success: true, data: { menuID, categoryIDs: ids } };
  } catch (e) {
    console.error("replaceMenuCategories error:", e);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ" };
  }
}
